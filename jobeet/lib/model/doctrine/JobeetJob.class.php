<?php

/**
 * JobeetJob
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class JobeetJob extends BaseJobeetJob
{
    
    public function asArray($host) //egy állásajánlatot tömbbé alakítva ad vissza
      {
        return array(
          'category'     => $this->getJobeetCategory()->getName(),
          'type'         => $this->getType(),
          'company'      => $this->getCompany(),
          'logo'         => $this->getLogo() ? 'http://'.$host.'/uploads/jobs/'.$this->getLogo() : null,
          'url'          => $this->getUrl(),
          'position'     => $this->getPosition(),
          'location'     => $this->getLocation(),
          'description'  => $this->getDescription(),
          'how_to_apply' => $this->getHowToApply(),
          'expires_at'   => $this->getCreatedAt(),
        );
      }
    
    
    
    public function extend($force = false) //megnöveli egy állásajánlat lejárati dátumát mai dátumtól számítva a configban beállított napok számával
      {
        if (!$force && !$this->expiresSoon())
        {
          return false;
        }
        
        $this->setExpiresAt(date('Y-m-d', time() + 86400 * sfConfig::get('app_active_days'))); //updateli az expiresAt mezőta mai dátum + a configban beállított napra
        $this->save();

        return true;
      }
  
    public function publish() //állásajánlat publikálása
    {
      $this->setIsActivated(true);
      $this->save();
    }
    
    public function getTypeName()
        {
          $types = Doctrine_Core::getTable('JobeetJob')->getTypes();
          return $this->getType() ? $types[$this->getType()] : '';
        }

    public function isExpired() // lejárt-e vagy sem
        {
          return $this->getDaysBeforeExpires() < 0;
        }

    public function expiresSoon() //5 napon belül le fog járni
        {
          return $this->getDaysBeforeExpires() < 5;
        }

    public function getDaysBeforeExpires() //hány nap van még lejáratig
        {
          return ceil(($this->getDateTimeObject('expires_at')->format('U') - time()) / 86400);
        }
    
    public function getCompanySlug() 
        {
          return Jobeet::slugify($this->getCompany());
        }
 
    public function getPositionSlug()
        {
          return Jobeet::slugify($this->getPosition());
        }
 
    public function getLocationSlug()
        {
          return Jobeet::slugify($this->getLocation());
        }
    
    public function updateLuceneIndex()
        {
          $index = JobeetJobTable::getLuceneIndex();

          // remove existing entries // törli az eddig mentett indexeket
          foreach ($index->find('pk:'.$this->getId()) as $hit)
          {
            $index->delete($hit->id);
          }

          // don't index expired and non-activated jobs // nem indexeljük a lejárt és nem aktivált állásajánlatokat
          if ($this->isExpired() || !$this->getIsActivated())
          {
            return;
          }

          $doc = new Zend_Search_Lucene_Document();

          // store job primary key to identify it in the search results //eltároljuk az állásajánlat id-jét
          $doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));

          // index job fields //indexeljük a állásajánlat mezőit
          $doc->addField(Zend_Search_Lucene_Field::UnStored('position', $this->getPosition(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('company', $this->getCompany(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('location', $this->getLocation(), 'utf-8'));
          $doc->addField(Zend_Search_Lucene_Field::UnStored('description', $this->getDescription(), 'utf-8'));

          // add job to the index 
          $index->addDocument($doc);
          $index->commit();
        }    
        
        
        
        
        
    public function save(Doctrine_Connection $conn = null) // új állásajánlat mentése
      {
        if ($this->isNew() && !$this->getExpiresAt())
        {
          $now = $this->getCreatedAt() ? $this->getDateTimeObject('created_at')->format('U') : time();
          $active_days = 30;//sfConfig::get('app_active_days');
          $this->setExpiresAt(date('Y-m-d H:i:s', strtotime($this->getCreatedAt()." +".$active_days." days")));
        }
        if (!$this->getToken())
        {
            $this->setToken(sha1($this->getEmail().rand(11111, 99999)));
        }
        $conn = $conn ? $conn : $this->getTable()->getConnection();
        $conn->beginTransaction();
        try
          {
            $ret = parent::save($conn);

            $this->updateLuceneIndex();

            $conn->commit();

            return $ret;
          }
          catch (Exception $e)
          {
            $conn->rollBack();
            throw $e;
          }
      }
        
      public function delete(Doctrine_Connection $conn = null) //állásajánlat törlése
        {
          $index = JobeetJobTable::getLuceneIndex();

          foreach ($index->find('pk:'.$this->getId()) as $hit)
          {
            $index->delete($hit->id); // ha törlünk egy munkát akkor a hozzá tartozó indexet is törölni kell
          }

          return parent::delete($conn);
        }  
}
